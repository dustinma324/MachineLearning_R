setwd("~/Desktop/Machine Learning/Hw1")
This homework assignment focuses on the `ggplot2` and `dplyr` packages. You will work with aesthetics and practice data manipulation operations. Additionally, you will practice working with R Markdown by completing the template. You can see what the rendered document looks like at any time, by pressing the "Knit" button within RStudio. You can execute a code chunk by pressing the arrow button within that code chunk located to the upper right portion of the code chunk within the RStudio IDE. Alternatively, you can execute a line of code within a code chunk by selecting that line and pressing Ctrl+ENTER (Windows) or Command+ENTER (Mac).
knitr::opts_chunk$set(echo = TRUE)
```{r, load_packages, warning=FALSE, message=FALSE}
x<-2
x
x<-2,3,4
x<-[2,3,4]
x
clear x
x <- 1
x.int <- 2
x.int
x
x.num = 2.2
x.num
X <- 4
x == X
class(x)
class(X)
x_vec = c(1,2,3,4)
x_vec
class(x_vec)
x_vec_2 <=1:4
x_vec_2 <-1:4
class(x_vec_2)
x_vec
x_vec_2
a_name_vec <- c(col1 = "HI", col2 = "Bye")
a_name_vec
b_named_vec = c("hi","Bye")
b_named_vec
names(b_named_vec) = c("col1","col2")
b_named_vec
a_name_vec
a_name_vec(1)
a_name_vec[1]
b_named_vec[2]
b_named_vec[3]
x_vec[1]
x_vec[4]
x_vec[2:4]
x_vec[c(1,2,4)]
my_list = list(var_1 1:4, var2 = c("yes","no","maybe"),var3 = seq(-1,1,length.out=5),var4=c("hello","Bye"))
my_list = list(var_1 = 1:4, var2 = c("yes","no","maybe"),var3 = seq(-1,1,length.out=5),var4=c("hello","Bye"))
my_list
class(my_list)
class(my_list$var4)
length(my_list)
str(my_list)
my_df = data.frame(x_1=1:4,)
my_df = data.frame(x_1=1:4,
x_2=my_list[[2]],
x_3=my_list[[3]],
x_4=my_list[[4]])
my_df = data.frame(x_1=1:4,
x_2=c("yes", "no", "hello", "maybe"),
x_3=seq(-1, 1, length.out = 4),
x_4=c(TRUE, TRUE, FALSE, TRUE))
my_df
str(my_df)
my_df[2,2]
my_df[2,1]
my_df[1,2]
my_df[2,1]
my_df
my_df[4,1]
my_df[3,1]
my_df[3,1]
my_df[3,3]
my_df[3,4]
my_df[3,2]
my_df[, c(1,3)]
my_df
iris
str(iris)
library(dplyr)
library(ggplot2)
str(iris)
iris[1:11, 'Speal.Length']
iris[1:11, 'Sepal.Length']
install.packages("tidyverse")
library()
library(dplyr)
library(ggplot2)
names(iris)
iris %>% names()
my_df
my_df %>% tbl_df()
iris %>% tbl_df()
my_df %>% tbl_df() %>% glimpse()
glimpse(my_df)
my_df %>% glimpse()
my_df %>% tbl_df %>% glimpse()
my_df %>% tbl_df() %>% select(c(1,3))
my_df
my_df %>% tbl_df() %>% slice(c(1,3,4))
my_df %>% tbl_df() %>% filter(x_4 == TRUE
)
my_df
my_df %>% tbl_df() %>% filter(x_4 == TRUE
)
my_df %>% tbl_df() %>% filter(x_4 == TRUE)
str(iris)
iris %>% ggplot()
iris %>% ggplot(mapping = aes(x = Sepal.Length))
iris %>% ggplot(mapping = aes(x = Sepal.Length))
#### SOLUTION
str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length))
iris %>% summary()
#str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 15)
#str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 15) + facet_wrap(~Species)
#str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6)
#str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6)
#str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6)
#str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6)
#str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6)
#str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6, color ="black")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
#str(iris)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6, color ="black")
### your code here
### your code here
### your code here
### your code here
### your code here
### your code here
### your code here
### your code here
### your code here
### your code here
### your code here
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6, color ="black", fill="red")
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins = 6, color ="black", fill="green")
iris %>% ggplot(mapping = aes(x = Sepal.Length)) + geom_histogram(bins=6, color  ="navyblue", fill = "gold")
+ geom_histogram(bins=6, color  ="navyblue", fill = "gold")
iris %>% ggplot(mapping = aes(x = Sepal.Length)) +
geom_histogram(bins=6, color  ="navyblue", fill = "gold")
iris %>% ggplot(mapping = aes(x = Sepal.Length)) +
geom_histogram(bins = 6, color = "black")
iris %>% ggplot(mapping = aes(x = Sepal.Length)) +
geom_histogram(bins = 6, color  ="navyblue", fill = "gold", size = 1.55)
iris %>% ggplot(mapping = aes(x = Sepal.Length)) +
geom_histogram(bins = 6, color  ="navyblue", fill = "gold", size = 1.55, alpha = 0.5)
upper_bound <- 8.2
lower_bound <- 4.2
upper_bound <- 8.2
hist_breaks <- seq(from = lower_bound, to = upper_bound, length.out = num_breaks)
num_breaks <- 5
num_breaks <- 5
lower_bound <- 4.2
upper_bound <- 8.2
hist_breaks <- seq(from = lower_bound, to = upper_bound, length.out = num_breaks)
x_dbl <- ### create vector 0 to 11
x_factor <- cut(x_dbl, breaks = ) ### set the breaks argument
x_dbl <- ### create vector 0 to 11
x_factor <- cut(x_dbl, breaks = num_breaks) ### set the breaks argument
x_dbl <- 0:11### create vector 0 to 11
x_factor <- cut(x_dbl, breaks = num_breaks) ### set the breaks argument
class(x_factor)
x_factor
?cut_interval
?cut()
x_dbl
x_dbl <- 0:11 ### create vector 0 to 11
x_factor <- cut(x_dbl, breaks = c(0,5,11)) ### set the breaks argument
class(x_factor)
x_factor
x_dbl <- 0:11 ### create vector 0 to 11
x_factor <- cut(x_dbl, breaks = c(0,5,11)) ### set the breaks argument
class(x_factor)
x_factor
x_factor_2 <- cut(x_dbl, breaks = c(0,5,11), inlude.lowest = TRUE) ### set the breaks and add the new argument
x_factor_2
x_factor_2 <- cut(x_dbl, breaks = c(0,5,11), inlcude.lowest = TRUE) ### set the breaks and add the new argument
x_factor_2
